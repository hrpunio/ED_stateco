ggplot() + xlim(-15, 15) +
geom_vline(x=2) +
geom_function(fun = dnorm, args=c(2,4))
ggplot() + xlim(-15, 15) +
geom_vline(intercept=2) +
geom_function(fun = dnorm, args=c(2,4))
ggplot() + xlim(-15, 15) +
geom_vline(xin=2) +
geom_function(fun = dnorm, args=c(2,4))
ggplot() + xlim(-15, 15) +
geom_vline(xintercept =2) +
geom_function(fun = dnorm, args=c(2,4))
ggplot() + xlim(-15, 15) +
geom_vline(xintercept =2, color=red) +
geom_function(fun = dnorm, args=c(2,4))
geom_vline(xintercept =2, color='red'') +
ggplot() + xlim(-15, 15) +
geom_vline(xintercept =2, color='red') +
ggplot() + xlim(-15, 15) +
geom_vline(xintercept =2, color='red') +
geom_function(fun = dnorm, args=c(2,4))
ggplot() +
geom_area(aes(x=c(-15,15)),stat="function", fun=dnorm, fill="blue")
ggplot() +
geom_area(aes(x=c(-15,15)),stat="function", fun=dnorm, args=c(2,4), fill="blue")
ggplot() +
geom_area(aes(x=c(-15,15)),stat="function",
fun=dnorm, args=c(2,4), fill="blue", alpha=.3)
ggplot() +
geom_area(aes(x=c(-15,15)),stat="function",
fun=dnorm, args=c(2,4), fill="blue", alpha=.3) +
geom_area(aes(x=c(-12,15)),stat="function",
fun=dnorm, args=c(1,2), fill="green", alpha=.3)
ggplot() +
geom_area(aes(x=c(-15,15)),stat="function",
fun=dnorm, args=c(2,4), fill="blue", alpha=.3) +
geom_area(aes(x=c(-12,15)),stat="function",
fun=dnorm, args=c(1,3), fill="green", alpha=.3)
###
s <- rnorm(n=5000, mean=5, sd=2)
library("ggplot2")
ggplot(s, aes(x=s)) +
geom_histogram(binwidth= this.binwd, alpha=.5, fill="steelblue")
###
s <- as.data.frame(rnorm(n=5000, mean=5, sd=2))
View(s)
###
s <- rnorm(n=5000, mean=5, sd=2)
ggplot(s, aes(x=s)) +
geom_histogram(binwidth= .1, alpha=.5, fill="steelblue")
###
s <- as.data.frame(v=rnorm(n=5000, mean=5, sd=2))
###
s <- data.frame(v=rnorm(n=5000, mean=5, sd=2))
ggplot(s, aes(x=s)) +
geom_histogram(binwidth= .1, alpha=.5, fill="steelblue")
View(s)
ggplot(s, aes(x=v)) +
geom_histogram(binwidth= .1, alpha=.5, fill="steelblue")
###
s <- data.frame(v=rnorm(n=5000, mean=5, sd=2))
library("ggplot2")
ggplot(s, aes(x=v)) +
geom_histogram(binwidth= .1, alpha=.5, fill="steelblue")
s0 <- sample(s, 20)
s0 <- sample(s$v, 20)
s0 <- sample(s$v, 20)
for (i in s0) {
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
for (i in s0$v) {
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
v <- s0$v
for (i in s0) {
v <- s0$v
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
#v <- s0$v
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
for (i in s$v) {
#v <- s0$v
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
m <- mean(i)
xy <- data.frame(lower=c(), upper=c())
View(xy)
for (i in s$v) {
m <- mean(i)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
library("tidyverse")
for (i in s$v) {
m <- mean(i)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
for (i in 1:200) {
s0 <- sample(s$v, 20)
m <- mean(s0)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
xy <- data.frame(lower=c(), upper=c())
for (i in 1:200) {
s0 <- sample(s$v, 20)
m <- mean(s0)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
xy <- filter (lower < 5 )
xy <- xy |> filter (lower < 5 )
xy <- data.frame(lower=c(), upper=c())
for (i in 1:200) {
s0 <- sample(s$v, 20)
m <- mean(s0)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
xy1 <- xy |> filter (lower < 5 )
xy1 <- xy |> filter (lower > 5 )
xy1 <- xy |> filter (lower > 5 | upper < 5)
xy1
250/rows(xy1)
250/nrow(xy1)
nrow(xy1)/250
xy <- data.frame()
for (i in 1:200) {
s0 <- sample(s$v, 20)
m <- mean(s0)
mi <- 1.96 * 2/sqrt(20)
lower <- m - mi
upper <- m + mi
xy.xy <- data.frame(lower, upper)
xy <- xy |> bind_rows(xy.xy)
#sample.ci <- function(x) {  m <- mean(sample(population1, sample.size)); return (m) }
#samples <- lapply(1:1000 ,  function(i) sample.mean )
}
#####
##### fertility employment age
library("eurostat")
emp <- get_eurostat(lfsi_emp_a)
emp <- get_eurostat('lfsi_emp_a')
View(emp)
emp0 <- emp |> filter (age=='15-64')
View(emp)
emp0 <- emp |> filter (age=='Y15-64')
emp0 <- emp |> filter (age=='Y15-64' & sex == 'F')
View(emp0)
emp0 <- emp |> filter (age=='Y15-64' & sex == 'F'  & unit == 'PC_POP')
View(emp0)
View(emp0)
emp0 <- emp |> filter (age=='Y15-64' & sex == 'F'  & unit == 'PC_POP') |>
filter (indic_em == 'EMP_LFS')
View(emp0)
emp0.pl <- emp0 |> filter (geo == 'PL')
View(emp0.pl)
levels (as.factor(emp$age))
emp0 <- emp |> filter (age=='Y15-64') |>
filter (sex == 'F'  & unit == 'PC_POP') |>
filter (indic_em == 'EMP_LFS')
emp0.pl <- emp0 |> filter (geo == 'PL')
View(dp0.pl)
emp0 <- emp |> filter (age == 'Y15-64') |>
filter (sex == 'F'  & unit == 'PC_POP') |>
filter (indic_em == 'EMP_LFS')
emp0.pl <- emp0 |> filter (geo == 'PL')
View(emp0.pl)
## education
## Population by educational attainment level, sex and age (%) - main indicators
edu <- get_eurostat('edat_lfse_03')
edu0 <- edu |> filter (sex == 'F')
edu0 <- edu |> filter (sex == 'F' & isced11 == 'ED5-8')
edu0 <- edu |> filter (sex == 'F' & isced11 == 'ED5-8' & age == 'Y15-64')
edu0.pl <- edu0 |> filter (geo == 'PL')
View(edu0.pl)
## Age (females)
age <- get_eurostat('demo_pjanind')
age0 <- age |> filter (indic_de == 'FMEDAGEPOP')
ag0.pl <- age0 |> filter (geo == 'PL')
View(ag0.pl)
emp0 <- emp |> filter (age == 'Y15-64') |>
filter (sex == 'F'  & unit == 'PC_POP') |>
filter (indic_em == 'EMP_LFS') |>
mutate (year = substr(TIME_PERIOD, 1, 4))
emp0.pl <- emp0 |> filter (geo == 'PL')
## education
## Population by educational attainment level, sex and age (%) - main indicators
edu <- get_eurostat('edat_lfse_03')
edu0 <- edu |> filter (sex == 'F' & isced11 == 'ED5-8' & age == 'Y15-64') |>
mutate (year = substr(TIME_PERIOD, 1, 4))
edu0.pl <- edu0 |> filter (geo == 'PL') |
mutate (year = substr(TIME_PERIOD, 1, 4))
View(edu0)
edu0 <- edu |> filter (sex == 'F' & isced11 == 'ED5-8' & age == 'Y15-64') |>
mutate (year = substr(TIME_PERIOD, 1, 4))
edu0.pl <- edu0 |> filter (geo == 'PL')
## Age (females)
age <- get_eurostat('demo_pjanind')
age0 <- age |> filter (indic_de == 'FMEDAGEPOP')
age0 <- age |> filter (indic_de == 'FMEDAGEPOP') |>
mutate (year = substr(TIME_PERIOD, 1, 4))
ag0.pl <- age0 |> filter (geo == 'PL')
##
data <- left_join(emp0.pl, edu0.pl, by='year')
age0.pl <- age0 |> filter (geo == 'PL')
##
data <- left_join(emp0.pl, edu0.pl, by='year') |>
left_join(age0.pl, by='year')
View(data)
edu0 <- edu |> filter (sex == 'F' & isced11 == 'ED5-8' & age == 'Y15-64') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (edu=values)
age0 <- age |> filter (indic_de == 'FMEDAGEPOP') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (age=values)
age0.pl <- age0 |> filter (geo == 'PL')
edu0.pl <- edu0 |> filter (geo == 'PL')
emp0 <- emp |> filter (age == 'Y15-64') |>
filter (sex == 'F'  & unit == 'PC_POP') |>
filter (indic_em == 'EMP_LFS') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (emp=values)
emp0.pl <- emp0 |> filter (geo == 'PL')
##
data <- left_join(emp0.pl, edu0.pl, by='year') |>
left_join(age0.pl, by='year')
View(data)
##
data <- left_join(emp0.pl, edu0.pl, by='year') |>
left_join(age0.pl, by='year') |>
select (emp, age, edu, year)
View(data)
## Fertility
age <- get_eurostat('demo_find')
## Age (females)
age <- get_eurostat('demo_pjanind')
fert0 <- filter (indic_de == 'TOTFERRT') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (tfr=values)
## Fertility
fert <- get_eurostat('demo_find')
fert0 <- filter (indic_de == 'TOTFERRT') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (tfr=values)
fert0 <- fert |> filter (indic_de == 'TOTFERRT') |>
mutate (year = substr(TIME_PERIOD, 1, 4)) |>
rename (tfr=values)
fert0.pl <- fert0 |> filter (geo == 'PL')
##
data <- left_join(emp0.pl, edu0.pl, by='year') |>
left_join(age0.pl, by='year') |>
left_join(fert0.pl, by='year')
##
data <- left_join(emp0.pl, edu0.pl, by='year') |>
left_join(age0.pl, by='year') |>
left_join(fert0.pl, by='year') |>
select (tfr, emp, age, edu, year)
View(data)
m1 <- lm(tfr ~ emp + age + edu + year + data = data)
m1 <- lm(tfr ~ emp + age + edu, data = data)
summary(m1)
## correlation matrix
corr(data, method='pearson')
## correlation matrix
cor(data, method='pearson')
## correlation matrix
data | select (-c(year)) |>
cor(data, method='pearson')
## correlation matrix
data | select (-c('year')) |>
cor(data, method='pearson')
## correlation matrix
data | select (-'year') |>
cor(data, method='pearson')
## correlation matrix
data |> select (-c(year)) |>
cor(data, method='pearson')
## correlation matrix
data |> select (-c(year)) #|>
## correlation matrix
data |> select (-c(year)) |> na.omit() |>
cor(data, method='pearson')
## correlation matrix
data |> select (-c(year)) |> na.omit() |>
cor(method='pearson')
## compute r for tfr vs edu for EU
data.eu <- left_join(emp0, edu0, by=c('year', 'geo')) |>
left_join(age0, by=c('year', 'geo')) |>
left_join(fert0, by=c('year', 'geo')) |>
select (tfr, emp, age, edu, year)
data.eu |> select (-c(year)) |> na.omit() |>
group_by(geo) |>
cor(method='pearson')
## compute r for tfr vs edu for EU
data.eu <- left_join(emp0, edu0, by=c('year', 'geo')) |>
left_join(age0, by=c('year', 'geo')) |>
left_join(fert0, by=c('year', 'geo')) |>
select (tfr, emp, age, edu, year, geo)
data.eu |> select (-c(year)) |> na.omit() |>
group_by(geo) |>
cor(method='pearson')
data.eu |> select (-c(year)) |> na.omit() |>
group_by(geo) #|>
data.eu |> select (edu, tfr) |> na.omit() |>
group_by(geo) #|>
data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) #|>
data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) |>
cor(method='pearson')
data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) |>
mutate (cor = cor(method='pearson'))
data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) %>%
mutate (cor = cor(., method='pearson'))
data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) %>%
summarise (cor = cor(edu, tfr, method='pearson'))
tfr_r <- data.eu |> select (geo, edu, tfr) |> na.omit() |>
group_by(geo) %>%
summarise (cor = cor(edu, tfr, method='pearson'))
tfr_r
View(tfr_r)
## correlation matrix
data |> select (-c(year)) |> na.omit() |>
cor(method='pearson')
ggplot(data, aes(x=year, y=tfr)) +
geom_line()
ggplot(data, aes(x=as.numeric(year), y=tfr)) +
geom_line()
data("marketing", package = "datarium")
str(marketing)
library("tidyverse")
## copy the structure of DF
cars |> filter(FALSE)
## copy the structure of DF
marketing.fut <- marketing |> filter(FALSE)
View(marketing.fut)
str(marketing)
## copy the structure of DF
marketing.fut %>% add_row(youtube = 100,
facebook = 300, newspaper=40, sales=NA)
marketing.fut <- marketing.fut |> add_row(youtube = 100,
facebook = "ciao")
marketing.fut <- marketing.fut |> add_row(youtube = 100,
facebook = 300, newspaper = 40, sales = NA)
# copy the structure of DF
marketing.fut <- marketing |> filter(FALSE)
## add one new row
marketing.fut <- marketing.fut |> add_row(youtube = 100,
facebook = 300, newspaper = 40, sales = NA)
library("lmtest")
bptest(model1)
library('datarium')
model1 <- lm(sales ~ youtube, data = marketing)
bptest(model1)
white.test(model1)
library('bstats')
library('bstats')
install.packages('bstats')
library('bstats')
library('skedastic')
install.packages('skedastic')
install.packages("skedastic", dependencies = c("Depends", "Imports"))
bp.test(model1, ~ youtube + I(youtube^2), data=marketing)
bptest(model1)
bptest(model1, ~ youtube + I(youtube^2), data=marketing)
ggplot(df, aes(x=predict(model1), y= marketing$sales)) +
geom_point() +
geom_abline(intercept=0, slope=1)
ggplot(marketing, aes(x=predict(model1), y= marketing$sales)) +
geom_point() +
geom_abline(intercept=0, slope=1)
ggplot(marketing, aes(x=predict(model1), y= sales)) +
geom_point() +
geom_abline(intercept=0, slope=1)
model1l <- lm(log(sales) ~ log(youtube), data = marketing)
bptest(model1l)
library("tidyverse")
#library('skedastic')
#install.packages('skedastic')
#install.packages("skedastic", dependencies = c("Depends", "Imports"))
bptest(model1)
library("lmtest")
data("marketing", package = "datarium")
str(marketing)
## copy the structure of DF
marketing.fut <- marketing |> filter(FALSE)
## add one new row
marketing.fut <- marketing.fut |> add_row(youtube = 100,
facebook = 300, newspaper = 40, sales = NA)
library("lmtest")
#library('skedastic')
#install.packages('skedastic')
#install.packages("skedastic", dependencies = c("Depends", "Imports"))
bptest(model1)
library('datarium')
model1 <- lm(sales ~ youtube, data = marketing)
summary(model1)
model1l <- lm(log(sales) ~ youtube, data = marketing)
bptest(model1l)
ggplot(marketing, aes(x=predict(model1l), y= log(sales))) +
geom_point() +
geom_abline(intercept=0, slope=1)
ggplot(marketing, aes(x=predict(model1), y= sales)) +
geom_point() +
geom_abline(intercept=0, slope=1)
ggplot(marketing, aes(x=predict(model1l), y= log(sales))) +
geom_point() +
geom_abline(intercept=0, slope=1)
bptest(model1l)
resettest(model1)
library("tidyverse")
library('datarium')
model1 <- lm(sales ~ youtube, data = marketing)
dwtest(model1)
lmtest::dwtest(model1)
library('eurostat')
library('eurostat')
library('bdl') ## local-data-bank or Bank Danych Lokalnych
options(bdl.api_private_key ='19c1cfc8-faec-4db5-9e9a-08db64593a4a')
p.vars <- c('7737',  ## Average monthly expenditures
'216968' ## ditto income
)
## get data for p.vars for whole Poland
## quite big (380 counties )
d <- get_data_by_variable(p.vars,
unitParentId=NULL, ## unitLevel4 id
unitLevel=1)
View(d)
## get data for p.vars for whole Poland
## quite big (380 counties )
d <- get_data_by_variable(p.vars,
unitParentId=NULL, ## unitLevel4 id
## 0 -PL; 1 - macroregion
unitLevel=0)
View(d)
## get data for p.vars for whole Poland
## quite big (380 counties )
d <- get_data_by_variable(p.vars,
unitParentId=NULL, ## unitLevel4 id
## 0 -PL; 1 - macroregion
unitLevel=0) |>
select (year, expenditures=val_7737, income=val_216968)
View(d)
write.csv(d, file='exp_income_PL.csv')
setwd("~/Projekty/BDO_en")
write.csv(d, file='exp_income_PL.csv')
write.csv(d, file='exp_income_PL.csv', row.names = F)
model10 < lm(expenditures ~ income, data=d)
model10 <- lm(expenditures ~ income, data=d)
summary(model10)
dwtest(model10)
lmtest::dwtest(model10)
lmtest::dwtest(model1)
lmtest::dwtest(model10)
ggplot(d, aes(x=predict(model10), y= year)) +
geom_line()
x=predict(model10)
## get data for p.vars for whole Poland
## quite big (380 counties )
d <- get_data_by_variable(p.vars,
unitParentId=NULL, ## unitLevel4 id
## 0 -PL; 1 - macroregion
unitLevel=0) |>
select (year, expenditures=val_7737, income=val_216968) |>
na.omit()
write.csv(d, file='exp_income_PL.csv', row.names = F)
model10 <- lm(expenditures ~ income, data=d)
ggplot(d, aes(x=predict(model10), y= year)) +
geom_line()
x=predict(model10)
ggplot(d, aes(x=predict(model10), y= as.numeric(year))) +
geom_line()
ggplot(d, aes(x=predict(model10) - expenditures, y= as.numeric(year))) +
geom_line()
ggplot(d, aes(y=predict(model10) - expenditures, x= as.numeric(year))) +
geom_line()
